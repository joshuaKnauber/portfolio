{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Plane","x","y","z","rot","position","rotation","args","attach","meshPhongMaterial","color","side","THREE","Rocket","Geometry","useState","yPos","setYPos","rocketRot","setRocketRot","planeRot","setPlaneRot","useSpring","yPosAnimated","rocketRotAnimated","planeRotAnimated","onScroll","evt","Math","max","deltaY","yRot","min","useEffect","window","addEventListener","removeEventListener","group","Scene","intensity","App","className","colorManagement","shadowMap","camera","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mPAWA,SAASA,EAAT,GAAwC,IAAD,IAAvBC,SAAuB,MAArB,EAAqB,MAAlBC,SAAkB,MAAhB,EAAgB,MAAbC,SAAa,MAAX,EAAW,MAARC,WAAQ,MAAJ,EAAI,EACrC,OACE,uBAAMC,SAAU,CAACJ,EAAGC,EAAGC,GAAIG,SAAU,CAAC,EAAGF,EAAK,GAA9C,UACE,qCAAqBG,KAAM,CAAC,EAAG,GAAIC,OAAO,aAC1C,cAAC,WAASC,kBAAV,CAA4BC,MAAO,MAAOF,OAAO,WAAYG,KAAMC,kBAMzE,SAASC,IACP,OACE,iCACE,mCAAmBN,KAAM,CAAC,EAAG,GAAI,GAAIC,OAAO,aAC5C,cAAC,WAASC,kBAAV,CAA4BC,MAAO,OAAQF,OAAO,gBAMxD,SAASM,IAAY,IAAD,EACMC,mBAAS,GADf,mBACXC,EADW,KACLC,EADK,OAEgBF,mBAAS,GAFzB,mBAEXG,EAFW,KAEAC,EAFA,OAGcJ,mBAAS,GAHvB,mBAGXK,EAHW,KAGDC,EAHC,OAK4CC,oBAAU,CACtEC,aAAc,CAAC,EAAGP,EAAK,EAAG,GAC1BQ,kBAAmB,CAAC,EAAGN,EAAW,GAClCO,iBAAkB,CAAC,EAAGL,EAAU,KAH1BG,EALU,EAKVA,aAAcC,EALJ,EAKIA,kBAMhBE,GAXY,EAKuBD,iBAMxB,SAACE,GAChBV,GAAQ,SAAAD,GAAI,OAAIY,KAAKC,IAAIb,EAAkB,KAAXW,EAAIG,OAAc,MAClDX,GAAa,SAAAY,GAAI,OAAIH,KAAKI,IAAID,EAAkB,KAAXJ,EAAIG,OAAc,MACvDT,GAAY,SAAAU,GAAI,OAAIH,KAAKI,IAAID,EAAkB,KAAXJ,EAAIG,OAAc,QAWxD,OARAG,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,QAAST,GAE1B,WACLQ,OAAOE,oBAAoB,QAASV,MAErC,IAGD,kCAEE,cAAC,WAASW,MAAV,CAAgBhC,SAAUkB,EAAcjB,SAAUkB,EAAlD,SACE,cAACX,EAAD,MAGF,cAAC,WAASwB,MAAV,CAAgBhC,SAAUkB,EAAcjB,SAAUkB,EAAlD,SACE,cAACxB,EAAD,CAAOC,EAAG,KAAMC,EAAG,EAAGC,EAAG,IAAMC,IAAK,UAS5C,SAASkC,IAEP,OACE,qCACE,8BAAcC,UAAW,KACzB,kCAAkBlC,SAAU,CAAC,GAAI,GAAI,GAAIkC,UAAW,IACpD,kCAAkBlC,SAAU,EAAE,IAAK,IAAK,GAAIkC,UAAW,IACvD,cAACzB,EAAD,OAMS,SAAS0B,IAEtB,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,CAAQC,iBAAe,EAACC,WAAS,EAACC,OAAQ,CAACvC,SAAS,CAAC,EAAG,EAAG,IAA3D,UAEE,cAACiC,EAAD,IACA,cAAC,IAAD,SC7FR,IAYeO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e56aa4af.chunk.js","sourcesContent":["import React, { useRef, useState, Suspense, useEffect } from 'react';\nimport { useSpring, animated } from '@react-spring/three';\n\nimport * as THREE from \"three\";\nimport { Canvas, useFrame, useThree, extend } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { EffectComposer, DepthOfField, Noise, Bloom, Vignette, ChromaticAberration } from \"@react-three/postprocessing\"\n\nimport './App.css';\n\n\nfunction Plane({x=0, y=0, z=0, rot=0}) {\n  return (\n    <mesh position={[x, y, z]} rotation={[0, rot, 0]}>\n      <planeBufferGeometry args={[5, 3]} attach=\"geometry\" />\n      <animated.meshPhongMaterial color={\"red\"} attach=\"material\"  side={THREE.DoubleSide} />\n    </mesh>\n  )\n}\n\n\nfunction Rocket() {\n  return (\n    <mesh>\n      <boxBufferGeometry args={[1, 10, 1]} attach=\"geometry\" />\n      <animated.meshPhongMaterial color={\"blue\"} attach=\"material\" />\n    </mesh>\n  )\n}\n\n\nfunction Geometry() {\n  const [yPos, setYPos] = useState(0)\n  const [rocketRot, setRocketRot] = useState(0)\n  const [planeRot, setPlaneRot] = useState(0)\n\n  const { yPosAnimated, rocketRotAnimated, planeRotAnimated } = useSpring({\n    yPosAnimated: [0, yPos-5, 0],\n    rocketRotAnimated: [0, rocketRot, 0],\n    planeRotAnimated: [0, planeRot, 0],\n  })\n\n  const onScroll = (evt) => {\n    setYPos(yPos => Math.max(yPos + evt.deltaY*0.001, 0))\n    setRocketRot(yRot => Math.min(yRot - evt.deltaY*0.001, 0))\n    setPlaneRot(yRot => Math.min(yRot - evt.deltaY*0.001, 0))\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"wheel\", onScroll)\n\n    return () => {\n      window.removeEventListener(\"wheel\", onScroll)\n    }\n  }, [])\n  \n  return (\n    <group>\n\n      <animated.group position={yPosAnimated} rotation={rocketRotAnimated}>\n        <Rocket />\n      </animated.group>\n\n      <animated.group position={yPosAnimated} rotation={rocketRotAnimated}>\n        <Plane x={1.25} y={3} z={0.75} rot={45}/>\n      </animated.group>\n      \n\n    </group>\n  )\n}\n\n\nfunction Scene() {\n\n  return (\n    <>\n      <ambientLight intensity={0.7}/>\n      <directionalLight position={[10, 10, 5]} intensity={2} />\n      <directionalLight position={[-10, -10, -5]} intensity={1} />\n      <Geometry />\n    </>\n  )\n}\n\n\nexport default function App() {\n\n  return (\n    <div className=\"App\">\n      <Canvas colorManagement shadowMap camera={{position:[0, 0, 5]}}>\n        {/* <OrbitControls/> */}\n        <Scene/>\n        <EffectComposer>\n          {/* <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} /> */}\n          {/* <Bloom luminanceThreshold={0.6} luminanceSmoothing={0.4} height={400} opacity={2} /> */}\n          {/* <ChromaticAberration offset={[0.001,0.0]}/> */}\n          {/* <Vignette eskil={false} offset={0.25} darkness={0.75} /> */}\n        </EffectComposer>\n      </Canvas>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}